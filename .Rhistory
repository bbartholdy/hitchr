dentrassi(4)
dentrassi(4)
dentrassi(4)
dentrassi(4)
dentrassi(4)
dentrassi(4)
dentrassi(4)
dentrassi(4)
dentrassi(4)
dentrassi(4)
dentrassi(4)
dentrassi(4)
dentrassi(4)
dentrassi(4)
dentrassi(4)
dentrassi(4)
dentrassi(4)
dentrassi(3)
males <- NULL
females
devtools::load_all()
test <- replicate(100, golgafrinchans(2))
test <- replicate(100, golgafrinchans(3))
test <- replicate(100, golgafrinchans(4))
humans(2)
humans(3)
humans(4)
devtools::load_all()
test <- replicate(100, infinite_improbability_drive(5))
test <- replicate(100, infinite_improbability_drive(5))
devtools::load_all()
test <- replicate(100, infinite_improbability_drive(5))
rm(list = ls())
race <- rep("golgafrinchan", n)
n_male <- floor(n * 0.5107)
n_female <- n - n_male
male_cov <- matrix(nrow = 3, ncol = 3)
n <- 5
race <- rep("golgafrinchan", n)
n_male <- floor(n * 0.5107)
n_female <- n - n_male
male_cov <- matrix(nrow = 3, ncol = 3)
repeat {
male_cov[1,] <- c(52.89566, 56.31551, rnorm(1, 40, 1))
male_cov[2,] <- c(56.31551, 80.5074, rnorm(1, 10, 1))
male_cov[3,] <- c(male_cov[1,3], male_cov[2,3] ,rnorm(1, 100, 1))
if(det(male_cov) > 0) break
}
repeat {
female_cov <- matrix(nrow = 3, ncol = 3)
female_cov[1,] <- c(46.90279, 50.20551, rnorm(1, 40, 1))
female_cov[2,] <- c(50.20551, 74.45026, rnorm(1, 10, 1))
female_cov[3,] <- c(female_cov[1,3], female_cov[2,3], rnorm(1,100, 1))
if(det(female_cov) > 0) break
}
c_names <- c("height, weight, IQ")
males <- as.data.frame(MASS::mvrnorm(n_male,
c(175.3269, 84.83123, 100), male_cov))
colnames(males) <- c_names
males$sex <- rep("male", n_male)
females <- as.data.frame(MASS::mvrnorm(n_female,
c(161.8203, 61.62517, 101), female_cov))
colnames(females) <- c_names
females$sex <- rep("female", n_female)
age <- round(runif(n, 0, 120))
occupation <- sample(c("Telephone Sanitiser", "Lawyer", "Hairdresser"),
size = n, replace = T, ...)
golgafrinchan_sample <- rbind(males, females)
golgafrinchan_sample$IQ <- round(golgafrinchan_sample$IQ)
golgafrinchan_sample
males
females
males <- as.data.frame(MASS::mvrnorm(n_male,
c(175.3269, 84.83123, 100), male_cov))
males
colnames(males) <- c_names
males
class(males)
rm(list = ls())
devtools::load_all()
replicate(10,infinite_improbability_drive(4))
replicate(10,infinite_improbability_drive(5))
replicate(10,infinite_improbability_drive(4))
test <- replicate(10,infinite_improbability_drive(4))
test <- replicate(1000,infinite_improbability_drive(4))
test <- replicate(1000,infinite_improbability_drive(5))
test <- replicate(1000,infinite_improbability_drive(5))
test <- replicate(1000,infinite_improbability_drive(4))
humans(4)
devtools::load_all()
test <- replicate(1000,infinite_improbability_drive(4))
devtools::load_all()
inf_improb_dr(10)
inf_improb_dr(10, quiet = F)
infinite_improbability_drive(10, quiet = F)
devtools::load_all()
infinite_improbability_drive(10, quiet = F)
infinite_improbability_drive(10, quiet = F)
infinite_improbability_drive(10, quiet = F)
infinite_improbability_drive(10, quiet = F)
infinite_improbability_drive(10, quiet = F)
knitr::opts_chunk$set(echo = TRUE)
library(hitchr)
library(tidyverse)
random_sample <- h2g2(10)
hitchr_sample %>%
filter(sex == "male" | "female") %>%
view
hitchr_sample <- inf_improb_dr(1000)
hitchr_sample %>%
filter(sex == "male" | "female") %>%
view
hitchr_sample %>%
filter(sex == "male" | sex == "female") %>%
view
hitchr_sample %>%
filter(sex == "male" | sex == "female") %>%
group_by(race) %>%
ggplot(aes(x = race, y = height)) +
geom_boxplot()
hitchr_sample %>%
filter(sex == "male" | sex == "female") %>%
group_by(race) %>%
ggplot(aes(x = race, y = height, fill = race)) +
geom_boxplot() +
facet_wrap(~ sex)
hitchr_sample %>%
filter(sex == "male" | sex == "female") %>%
group_by(race) %>%
ggplot(aes(x = sex, y = height, fill = race)) +
geom_boxplot() +
facet_wrap(~ race)
hitchr_sample %>%
filter(sex == "male" | sex == "female") %>%
group_by(race) %>%
ggplot(aes(x = sex, y = height, fill = race)) +
geom_boxplot() +
theme_minimal() +
facet_wrap(~ race)
knitr::opts_chunk$set(echo = TRUE)
library(hitchr)
remotes::install_github("bbartholdy/hitchr")
devtools::load_all()
hitchr::h2g2(10) # generates a random sample of 10 individuals
hitchr_sample <- inf_improb_dr(1000)
hitchr_sample %>%
filter(sex == "male" | sex == "female") %>%
group_by(race) %>%
ggplot(aes(x = sex, y = height, fill = race)) +
geom_boxplot() +
theme_minimal() +
facet_wrap(~ race)
library(tidyverse)
hitchr_sample %>%
filter(sex == "male" | sex == "female") %>%
group_by(race) %>%
ggplot(aes(x = sex, y = height, fill = race)) +
geom_boxplot() +
theme_minimal() +
facet_wrap(~ race)
hitchr_sample %>%
filter(sex == "male" | sex == "female") %>%
group_by(race) %>%
ggplot(aes(x = sex, y = height, fill = race)) +
geom_boxplot() +
theme_minimal() +
facet_wrap(~ race) +
theme(legend.position = "none")
hitchr_sample %>%
filter(sex == "male" | sex == "female") %>%
group_by(race) %>%
ggplot(aes(x = sex, y = height, fill = race)) +
geom_boxplot() +
theme_minimal() +
scale_colour_viridis_d() +
facet_wrap(~ race) +
theme(legend.position = "none")
hitchr_sample %>%
filter(sex == "male" | sex == "female") %>%
group_by(race) %>%
ggplot(aes(x = sex, y = height, fill = race)) +
geom_boxplot() +
theme_minimal() +
scale_fill_viridis_d() +
facet_wrap(~ race) +
theme(legend.position = "none")
devtools::load_all()
hitchr_sample <- inf_improb_dr(1000)
hitchr_sample %>%
filter(sex == "male" | sex == "female") %>%
group_by(race) %>%
ggplot(aes(x = sex, y = height, fill = race)) +
geom_boxplot() +
theme_minimal() +
scale_fill_viridis_d() +
facet_wrap(~ race) +
theme(legend.position = "none")
devtools::build_readme()
devtools::build_readme()
rnorm(100, 150, 10)
devtools::load_all()
devtools::build_readme()
devtools::document()
devtools::build_readme()
devtools::load_all()
devtools::install_github()
devtools::install_github("bbartholdy/hitchr")
test_sample <- infinite_improbability_drive(100)
head(missing(test_sample))
devtools::load_all()
test_sample <- infinite_improbability_drive(100)
humans(20)
devtools::load_all()
humans(20)
test_humans <- humans(20)
test_humans$occupation[test_humans$age > 70] <- paste(test_humans$occupation, "(retired)")
test_humans$occupation
test_humans$occupation[test_humans$age > 70]
test_humans$occupation[test_humans$age > 70] <- append("retired")
test_humans$occupation[test_humans$age > 70] <- append(rep("retired"))
append(test_humans$occupation[test_humans$age > 70], "retired")
test_humans <- humans(20)
append(test_humans$occupation[test_humans$age > 70], "retired")
test_humans <- humans(20)
test_humans$occupation[test_humans$age > 70]
test_humans$occupation[test_humans$age > 70] <- paste(test_humans$occupation[test_humans$age > 70], "(retired)")
test_humans
test_humans <- humans(20)
?append
append(1:5, 0:1, after = 3)
paste(test_humans$occupation[test_humans$age > 70], "retired")
paste(test_humans$occupation[test_humans$age > 70], "(retired)")
test_humans$occupation[test_humans$age > 70] <- paste(test_humans$occupation[test_humans$age > 70], "(retired)")
test_humans
test_humans <- humans(20)
missing(test_humans)
dim(test_humans)
matrix(nrow = nrow(test_humans), ncol = ncol(test_humans))
na_vector <- vector(length = nrow(test_humans) * ncol(test_humans))
na_vector <- vector(1, length = nrow(test_humans) * ncol(test_humans))
na_vector <- c(rep(1, nrow(test_humans) * ncol(test_humans)))
na_vector[sample(1:length(na_vector), prob = 0.1)] <- NA
na_vector[sample(na_vector, prob = 0.1)] <- NA
na_vector
na_vector[sample(na_vector, size = 0.1)] <- NA
na_vector
na_vector[sample(na_vector, size = 0.1 * length(na_vector))] <- NA
na_vector
na_vector[sample(na_vector, size = 0.1 * length(na_vector))] <- NA
na_vector
n_vect <- nrow(test_humans) * ncol(test_humans)
na_vector <- c(rep(1, n_vect))
na_vector[sample(1:length(na_vector), size = 0.1 * n_vector)] <- NA
na_vector[sample(1:length(na_vector), size = 0.1 * n_vect)] <- NA
na_vector
as.matrix(na_vector, nrow = nrow(test_humans), ncol = ncol(test_humans))
dim(test_humans)
nrow(test_humans)
as.matrix(na_vector)
?as.matrix
matrix(na_vector, nrow = nrow(test_humans), ncol = ncol(test_humans))
na_matrix <- matrix(na_vector, nrow = nrow(test_humans), ncol = ncol(test_humans))
test_humans * na_matrix
as.vector(test_humans)
as.array(test_humans)
is.na(na_matrix)
?replace
replace(test_humans, na_matrix)
replace(test_humans, na_matrix, NA)
replace(test_humans, as.list(na_matrix), NA)
as.list(na_matrix)
replace(test_humans[na_matrix == NA], NA)
replace(test_humans, na_matrix == NA, NA)
na_matrix
replace(test_humans[is.na(na_matrix)], na_matrix == NA, NA)
is.na(na_matrix)
m <- is.na(na_matrix)
test_humans[m]
test_humans[m] <- NA
test_humans
missing_asymm <- function(x, na_prob = 0.1, cols = seq_along(x)){
x_na <- x[cols]
n_vect <- nrow(x_na) * ncol(x_na)
na_vector <- c(rep(1, n_vect))
na_vector[sample(1:length(na_vector), size = 0.1 * n_vect)] <- NA
na_matrix <- is.na(matrix(na_vector, nrow = nrow(x_na), ncol = ncol(x_na)))
m <- is.na(na_matrix)
x[m] <- NA
}
missing_asymm(test_humans)
missing_asymm(test_humans)
missing_asymm <- function(x, na_prob = 0.1, cols = seq_along(x)){
x_na <- x[cols]
n_vect <- nrow(x_na) * ncol(x_na)
na_vector <- c(rep(1, n_vect))
na_vector[sample(1:length(na_vector), size = 0.1 * n_vect)] <- NA
na_matrix <- is.na(matrix(na_vector, nrow = nrow(x_na), ncol = ncol(x_na)))
m <- is.na(na_matrix)
x[m] <- NA
return(x)
}
missing_asymm(test_humans)
test_humans
test_humans <- humans(20)
missing_asymm(test_humans)
missing_asymm <- function(x, na_prob = 0.1, cols = seq_along(x)){
x_na <- x[cols]
n_vect <- nrow(x_na) * ncol(x_na)
na_vector <- c(rep(1, n_vect))
na_vector[sample(1:length(na_vector), size = 0.1 * n_vect)] <- NA
na_matrix <- is.na(matrix(na_vector, nrow = nrow(x_na), ncol = ncol(x_na)))
x[na_matrix] <- NA
return(x)
}
missing_asymm(test_humans)
missing_asymm(test_humans, cols = 2:5)
na_matrix <- na_matrix[,-1]
na_matrix
m <- is.na(na_matrix)
test_humans[m]
dim(test_humans)
dim(m)
test_humans[m] <- NA
missing_asymm <- function(x, na_prob = 0.1, cols = seq_along(x)){
x_na <- x[cols]
n_vect <- nrow(x_na) * ncol(x_na)
na_vector <- c(rep(1, n_vect))
na_vector[sample(1:length(na_vector), size = 0.1 * n_vect)] <- NA
na_matrix <- is.na(matrix(na_vector, nrow = nrow(x_na), ncol = ncol(x_na)))
x_na[na_matrix] <- NA
x[cols] <- x_na
return(x)
}
test_humans
missing_asymm(test_humans)
na_test <- missing_asymm(test_humans)
is.na(na_test)
na_test <- missing_asymm(test_humans)
na_test
na_test <- missing_asymm(test_humans, cols = 2:5)
na_test
devtools::test()
rm(list = ls())
devtools::load_all()
devtools::test()
devtools::test()
hum_samp <- humans(100)
na_prob <- 0.1
hum_samp_na <- missing(hum_samp, na_prob = na_prob)
hum_vect_na <- hum_samp_na[,2]
hum_assym_na <- is.na(missing(hum_samp, na_prob = na_prob, symm = F))
hum_assym_select <- is.na(missing(hum_samp, na_prob = na_prob, cols = 2:5, symm = F))
mean(colMeans(hum_assym_select[,2:5]))
devtools::test()
devtools::test()
devtools::check()
devtools::check()
usethis::use_github_action("render-rmarkdown")
devtools::build_readme()
library(rvest)
url %>%
html_nodes(".entry normal") %>%
html_children() %>%
html_table()
url <- read_html("https://www.thepoke.co.uk/2016/03/17/extraordinary-jobs-1881-british-census/")
url %>%
html_nodes(".entry normal") %>%
html_children() %>%
html_table()
funny_occupations <- url %>%
html_nodes(".entry normal") %>%
html_children() %>%
html_table()
funny_occupations <- url %>%
html_nodes(".entry normal") %>%
html_children() %>%
html_text()
funny_occupations <- url %>%
html_nodes(path = "/html/body/div[2]/div[2]/div/div[2]/div[1]/div[1]/div[2]/div[1]/blockquote/p") %>%
html_children() %>%
html_text()
funny_occupations <- url %>%
html_nodes(path = "/html/body/div[2]/div[2]/div/div[2]/div[1]/div[1]/div[2]/div[1]/blockquote") %>%
html_children() %>%
html_text()
funny_occupations <- url %>%
html_nodes("/html/body/div[2]/div[2]/div/div[2]/div[1]/div[1]/div[2]/div[1]/blockquote") %>%
html_children() %>%
html_text()
funny_occupations <- url %>%
html_nodes(xpath = "/html/body/div[2]/div[2]/div/div[2]/div[1]/div[1]/div[2]/div[1]/blockquote") %>%
html_children() %>%
html_text()
funny_occupations <- url %>%
html_element(".blockquote") %>%
html_children() %>%
html_text()
funny_occupations <- url %>%
html_element(".blockquote")
funny_occupations <- url %>%
html_element("h1")
funny_occupations <- url %>%
html_node("h1")
funny_occupations <- url %>%
html_node("h1") %>%
html_text()
funny_occupations <- url %>%
html_nodes("h1") %>%
html_text()
funny_occupations
funny_occupations <- url %>%
html_nodes("h2") %>%
html_text()
funny_occupations <- url %>%
html_nodes("h3") %>%
html_text()
funny_occupations <- url %>%
html_nodes("p") %>%
html_text()
funny_occupations
funny_occupations <- url %>%
html_nodes("blockquote p") %>%
html_text()
funny_occupations <- url %>%
html_nodes(".blockquote") %>%
html_text()
funny_occupations <- url %>%
html_nodes(".blockquote p") %>%
html_text()
funny_occupations <- url %>%
html_nodes("blockquote p") %>%
html_text()
funny_occupations <- url %>%
html_nodes("blockquote p") %>%
html_table()
funny_occupations <- url %>%
html_nodes("blockquote p") %>%
html_children()
funny_occupations <- url %>%
html_nodes("blockquote p") %>%
html_children() %>%
html_table()
funny_occupations <- url %>%
html_nodes("blockquote p") %>%
html_children() %>%
html_text(trim = T)
funny_occupations
funny_occupations <- url %>%
html_nodes("blockquote p") %>%
html_children() %>%
html_text()
funny_occupations
funny_occupations <- url %>%
html_nodes("blockquote p") %>%
html_text()
install.packages("tidytext")
library(tidytext)
funny_occupations %>%
unnest_sentences()
funny_occupations %>%
unnest_characters()
library(tibble)
funny_occupations %>%
as_tibble %>%
unnest_characters()
funny_occupations %>%
as_tibble
text_df <- funny_occupations %>%
as_tibble
text_df %>%
unnest_characters()
devtools::test()
devtools::test()
devtools::test()
# test various sample sizes
hitchr_sample <- list()
for(i in 5:100){
hitchr_sample[i] <- infinite_improbability_drive(i, quiet = T)
}
hitchr_sample[1]
# test various sample sizes
hitchr_sample <- list()
for(i in 5:100){
hitchr_sample[i-4] <- infinite_improbability_drive(i, quiet = T)
}
hitchr_sample[1]
# test various sample sizes
hitchr_sample <- list()
hitchr_sample[1] <- infinite_improbability_drive(5, quiet = T)
infinite_improbability_drive(5, quiet = T)
hitchr_sample[1] <- infinite_improbability_drive(5, quiet = T)
list(infinite_improbability_drive(5))
# test various sample sizes
hitchr_sample <- list()
for(i in 5:100){
hitchr_sample[i-4] <- list(infinite_improbability_drive(i, quiet = T))
}
hitchr_sample[1]
hitchr_sample[2]
hitchr_sample[96]
# test various sample sizes
hitchr_sample <- list()
# test various sample sizes
hitchr_sample <- list()
for(i in 5:100){
hitchr_sample[[i-4]] <- infinite_improbability_drive(i, quiet = T)
}
# make sure there are no sporadic errors
hitchr_sample2 <- replicate(1000, infinite_improbability_drive(100))
devtools::test()
devtools::build_readme()
usethis::use_git_ignore(".Rhistory")
